#+BEGIN_HTML
---
layout: post
title: "Nginx 模块开发与架构解析之准备工作"
date: 2014-11-25 17:33:09 +0800
comments: true
categories: 
---
#+END_HTML

* 准备工作
** Linux 操作系统
   需要一个内核为Linux2.6 及以上版本的操作系统，因为Linux2.6及以上内核才支持epoll。
   而在Linux上使用select或poll来解决事件的多路复用是无法解决高并发压力问题的。
** 使用Nginx的必备软件
   + GCC
     用来编译C语言程序。 sudo aptitude install build-essential
   + PCRE库
     PCRE(Perl Compatible Regular Expression, perl兼容正则表达式)
     如果在配置文件中使用了正则表达式，则在编译Nginx时就必须把pcre库编译进Nginx。
     pcre-devel是pcre做二次开发时需要使用的开发库
     sudo aptitude install libpcre3 libpcre3-dev
   + zlib库
     用于对HTTP包的内容做gzip格式的压缩。zlib-devel是做二次开发时需要使用的开发库
     sudo aptitude install zlib1g-dev
   + openssl 开发库
     如果需要支持更安全的SSL协议上传输http，就需要openssl库，
     openssl-devel是做二次开发时需要使用的开发库
     sudo aptitude install libssl-dev openssl
** Linux内核参数的优化
   最常用的配置修改，修改/etc/sysctl.conf文件，P9
   #+BEGIN_EXAMPLE
   #进程可以打开的最大句柄数，该参数直接限制最大并发数
   fs.file-max = 999999

   #设置为1，允许TIME-WAIT状态的socket重新用于新的TCP连接
   net.ipv4.tcp_tw_reuse = 1

   #当keepalive启用时，tcp发送keepalive消息的频度，默认2小时，设置的小一些可更快清理无效连接
   net.ipv4.tcp_keepalive_time = 600

   # 当服务主动关闭连接时，socket保持在FIN-WAIT-2状态的最大时间
   net.ipv4.tcp_fin_timeout = 30

   # OS允许TIME_WAIT套接字数量的最大值，超过该数，TIME_WAIT套接字将立即被清除并打印警告信息
   # 默认为 180000，过多的TIME_WAIT套接字会使web服务器变慢
   net.ipv4.tcp_max_tw_buckets = 5000

   # 在udp和tcp连接中本地端口的取值范围
   net.ipv4.ip_local_port_range = 1024 61000

   # tcp接受缓存大最小值，默认值，最大值
   net.ipv4.tcp_rmem = 4096 32768 262142

   # tcp发送缓存的最小值，默认值，最大值
   net.ipv4.tcp_wmem = 4096 32768 262142

   # 网卡接受的数据包的速度大于内核处理速度时，会有一个队列保存这些包，该参数是设置该包的
   # 队列的最大值
   net.core.netdev_max_backlog = 8096

   # 内核套接字接受缓存区默认大小
   net.core.rmem_default = 262144

   # 内核套接字发送缓存区默认大小
   net.core.wmem_default = 262144

   # 内核套接字接受缓存区最大大小
   net.core.rmem_max = 2097152

   # 内核套接字发送缓存区最大大小
   net.core.wmem_max = 2097152
   # 以上4个参数的设置需要根据业务特性以及实际情况的硬件成本来综合考虑

   # 与性能无关，用于解决tcp的syn攻击
   net.ipv4.tcp_syncookies = 1

   # tcp三次握手建立阶段接受SYN请求队列的最大长度，默认为1024，设置的大一些可以使出现繁忙的nginx
   # 来不及accept新连接时，不至于丢掷客户端发起的连接请求
   net.ipv4.tcp_max_syn_backlog = 1024

   修改完之后，执行sysctl -p命令，使上述配置失效
   #+END_EXAMPLE
   *注意： 滑动窗口的大小与套字节缓冲区会在一定程度上影响并发连接的数目。每个TCP连接都会为
   维护TCP滑动窗口而消耗内存，这个窗口会根据服务器的处理速度收缩或扩张*
** configure命令参数(P12)
   使用 ./configure --help： 查看帮助信息
** configure执行流程(P18)
   configure是由shell脚本编写，中间会调用<nginx-source>/auto/目录下的脚本。
   在configure中检查某个特性是否存在时，会生成一个最简单的只包含main函数的C程序，该程序会包含
   相应的头文件，然后通过检查是否可以编译通过来确认特性是否支持。
** configure生成的文件
   当configure执行成功时会生成objs目录。
   其中生成的ngx\_modules.c是一个非常关键的文件。该文件是用来定义ngx\_modules数组的。
   该数组指明了每个模块在Nginx中的优先级，当一个请求符合同时符合多个模块的处理规则时，将按照
   他们在ngx\_modules数组中的顺序选择最靠前的模块优先处理。对于HTTP过滤模块而言则恰恰相反。
   ngx\_modules中模块执行的先后顺序非常重要，不正确的顺序会导致Nginx无法工作。
** nginx的命令行控制
   - 直接执行nginx二进制程序
     <nginx-install-path>/sbin/nginx,此时会读取默认路径下的配置文件
     <nginx-install-path>/conf/nginx.conf,在没有显示指定nginx.conf配置文件的路径时，
     将打开在configure命令在执行时使用的--conf-path=PATH指定的nginx.conf文件。
     不显示指定--conf-path=PATH, 则默认是<nginx-install-path>/conf/nginx.conf
   - 指定配置文件启动
     <ngx-install-path>/sbin/nginx -c conf-path
   - 指定安装目录的启动方法
     <ngx-install-path>/sbin/nginx -p <ngx-install-path>
   - 指定全局配置项的启动方式
     使用-g参数可以临时指定一些全局配置项，例如：
     <ngx-install-path>/sbin/nginx -g "pid /var/nginx/test.pid;"
     -g参数的约束条件是指定的配置项不能与默认路径下的nginx.conf中的配置项相冲突，否则无法
     启动，上例中，类似 pid logs/nginx.pid是不能出现在nginx.conf文件中的。
     以-g方式启动的nginx服务执行其他命令行时，需要把-g参数也带上，否则可能出现不匹配的情况
   - 测试配置信息是否有错误
     nginx -t
   - 在测试配置阶段不输出信息
     nginx -t -q, 不把error级别以下的信息输出到屏幕
   - 显示版本信息
     nginx -v
   - 显示编译阶段参数
     nginx -V
   - 快速停止服务 
     nginx -s stop: 等价与直接向该进程发送TERM或INT信号。
   - “优雅”的停止服务
     nginx -s quit, 会先关闭监听端口，停止接受新的连接，然后把当前
     正在处理的连接全部处理完，最后在退出进程。可以直接发送QUIT信号给master进程。
     停止某个worker进程，可以向该进程发送WINCH信号, kill -s SIGWINCH worker-pid
   - 使运行中的nginx重读配置并生效
     nginx -s reload, 发送HUP信号达到同样的效果。
   - 日志回滚
     nginx -s reopen参数可以重新打开日志文件，可以先把当前日志文件改名或者
     转移到其他目录中进行备份，再重新打开时就会生成新的日志文件。一个简单的脚本可以实现
     上述操作：
     mv nginx_log_path xxx
     nginx -s reopen

     nginx -s reopen命令等价于kill -s SIGUSR1 <nginx-master-pid>
   - 平滑升级nginx（测试了一下，有些编译的程序不好使）
     http://wiki.nginx.org/ChsCommandLine
     升级步骤如下：
     使用新的可执行程序替换旧的（最好做好备份）
     通知正在运行的旧版本nginx准备升级， kill -s SIGUSR2 nginx-master- pid
     此时运行中的nginx会将pid文件重命名，启动新的nginx，通过kill向旧版本的
     master进程发送SIGQUIT信号
